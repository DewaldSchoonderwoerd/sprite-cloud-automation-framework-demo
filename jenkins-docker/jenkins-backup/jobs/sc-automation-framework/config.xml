<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.42">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.2"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.2">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
    <org.jenkinsci.plugins.workflow.multibranch.JobPropertyTrackerAction plugin="workflow-multibranch@2.26">
      <jobPropertyDescriptors>
        <string>hudson.model.ParametersDefinitionProperty</string>
      </jobPropertyDescriptors>
    </org.jenkinsci.plugins.workflow.multibranch.JobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.ChoiceParameterDefinition>
          <name>testSuite</name>
          <description>SpriteCloudApiOnlyTests.xml API_ONLY
                                            SpriteCloudCICDSuite.xml ALL
                                            SpriteCloudWebRemoteOnlyTests.xml  WEB_ONLY</description>
          <choices>
            <string>API_ONLY</string>
            <string>ALL</string>
            <string>WEB_ONLY</string>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.94">
    <script>pipeline {
    agent any

    tools {
        // Install the Maven version configured as &quot;M3&quot; and add it to the path.
        maven &quot;maven-3.8.3&quot;
    }
    
    environment{
        API_KEY = &apos;Njc4OTA5MGVlY2QyNDhlYTBjY2MzN2E4MjgzNmRmMjI4ZWM4OWFiZDE1ZDY1OWUyZWU2MmFhOGNkMjBiNDVlYTQ5&apos;
        PROFILE_ID = &apos;3792&apos;
        testNGSuiteFile = &apos;none&apos;
    }

    stages {
        stage(&apos;Project Setup&apos;) {
            parallel {
                stage(&apos;Set Up Parameters&apos;) {
                    steps {
                        script {
                            properties([
                                parameters([
                                    choice(
                                        choices: 
                                            [&apos;API_ONLY&apos;, 
                                            &apos;ALL&apos;, 
                                            &apos;WEB_ONLY&apos;], 
                                        description: 
                                            &apos;&apos;&apos;SpriteCloudApiOnlyTests.xml API_ONLY
                                            SpriteCloudCICDSuite.xml ALL
                                            SpriteCloudWebRemoteOnlyTests.xml  WEB_ONLY&apos;&apos;&apos;, 
                                        name: &apos;testSuite&apos;
                                    )
                                ])
                            ])
                            
                            
                            switch(testSuite) {            
                                 case &quot;API_ONLY&quot;: 
                                    testNGSuiteFile = &quot;SpriteCloudApiOnlyTests.xml&quot;;
                                    break; 
                                 case &quot;WEB_ONLY&quot;: 
                                    testNGSuiteFile = &quot;SpriteCloudWebRemoteOnlyTests.xml&quot;;
                                    break; 
                                 case &quot;ALL&quot;: 
                                     testNGSuiteFile = &quot;SpriteCloudCICDSuite.xml&quot;;
                                    break; 
                                 default: 
                                    error &quot;${testSuite} not a valid choice&quot;
                                    break; 
                            }

                            if (testSuite.isEmpty() || testNGSuiteFile == &apos;none&apos;) {
                                error &apos;testSuite cannot be empty - ABORTING build&apos;
                            }

                            echo &quot;Currently run against params:&quot;
                            echo &quot;testSuite: ${testSuite}&quot;
                            echo &quot;testNGSuiteFile: ${testNGSuiteFile}&quot;
                        }
                    }
                }
                
                stage(&apos;Pull Git Repository&apos;) {
                    steps {
                        // Get some code from a GitHub repository
                        git branch: &apos;main&apos;, url: &apos;https://github.com/DewaldSchoonderwoerd/sprite-cloud-automation-framework-demo.git&apos;
                    }
                }
            }
        }
        
        stage(&apos;Build Automation Frameork And Start Test Run&apos;) {
            steps {
                // Run Maven on a Unix agent.
                sh &quot;mvn -Dmaven.test.failure.ignore=true clean install surefire-report:report -Dfile=src/test/resources/${testNGSuiteFile}&quot;

            }

            post {
                // If Maven was able to run the tests, even if some of the test
                // failed, record the test results and archive the jar file.
                success {
                    junit &apos;**/reports/*/TEST-*.xml&apos;
                    archiveArtifacts &apos;target/*.jar&apos;
                }
            }
        }
        
        stage(&apos;Upload result to Calliope&apos;){
            steps{
                script{
                    
                    def reportPath = findFiles(glob: &quot;**/testng-results.xml&quot;)[0].path
                    def reportAbsolutePath = new File(env.WORKSPACE, reportPath).getParent() +&quot;/testng-results.xml&quot;
                    
                    echo &quot;TestNG Results Report Absolute Path: &quot; + reportAbsolutePath
                    echo &quot;Uploading testng-results.xml to Calliope&quot;
                    
                    final def (String fileUploadResponse, String fileUploadCode) =
                    sh(script:
                        &quot;curl -s -w &apos;\n%{response_code}&apos; -X POST --header &apos;accept: application/json&apos; --header &apos;x-api-key: ${API_KEY}&apos; --header &apos;Content-Type: multipart/form-data&apos; --form &apos;file[]=@\&quot;${reportAbsolutePath}\&quot;&apos; --form &apos;os=\&quot;windows\&quot;&apos; --form &apos;platform=\&quot;web\&quot;&apos; --form &apos;build=\&quot;50\&quot;&apos; --form &apos;envelope=\&quot;false\&quot;&apos; --form &apos;smart=\&quot;true\&quot;&apos; https://app.calliope.pro/api/v2/profile/${PROFILE_ID}/import/testng -v&quot;,
                        
                        returnStdout: true
                    )
                    .trim()
                    .tokenize(&quot;\n&quot;)
                    
                    echo &quot;Trigger Calliope Report upload status code - ${fileUploadCode}&quot;
                    echo &quot;Trigger Calliope Report upload response - ${fileUploadResponse}&quot;
                    
                    if (fileUploadCode == &quot;201&quot;) {
                        def json = new groovy.json.JsonSlurperClassic().parseText(fileUploadResponse)
                        def reportId = json.report_id
                        def reportUrl = json.report_url
                        def reportStatusUrl = json.report_status_url
                        echo &quot;Uploading testng-results.xml to Calliope task successfully requested, report ID: ${reportId}&quot;
                        echo &quot;Follow this link to the Calliope report: ${reportUrl}&quot;
                    } else {
                        error &apos;Unable upload report to Calliope!&apos;
                    }
                }
            }
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>